#!/usr/bin/env python
# coding: utf-8

# In[29]:


import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
get_ipython().run_line_magic('matplotlib', 'inline')


# In[30]:


from sklearn.datasets import load_boston
boston_dataset = load_boston()


# In[31]:


print(boston_dataset.keys())


# In[32]:


# now loading the data into a pandas dataframe using pd.DataFrame


# In[33]:


boston = pd.DataFrame(boston_dataset.data, columns=boston_dataset.feature_names)
boston.head()


# In[34]:


# we can see that the target value MEDV is missing from the data.


# In[35]:


boston['MEDV'] = boston_dataset.target


# In[36]:


# datapreprocessing


# In[37]:


boston.isnull().sum()


# In[38]:


# EDA lets first plot the distribution of the target variable MEDV


# In[39]:


sns.set(rc={'figure.figsize':(11.7,8.27)})
sns.displot(boston['MEDV'], bins=30)
plt.show()


# In[40]:


# creating the correlation matrix


# In[41]:


correlation_matrix = boston.corr().round(2)
# annot = True to print the values inside the square 

sns.heatmap(data=correlation_matrix, annot=True)


# In[42]:


#based on the observation we will make RM and LSTAT as our features. 
#by scatter plot let's see hiw these features vary with MEDV


# In[43]:


plt.figure(figsize=(20,5))
features = ['LSTAT', 'RM']
target = boston['MEDV']

for i, col in enumerate(features):
    plt.subplot(1, len(features), i+1)
    x = boston[col]
    y = target
    plt.scatter(x,y, marker='o')
    plt.title(col)
    plt.xlabel(col)
    plt.ylabel('MEDV')


# In[44]:


# Preparing the data for training the model

X = pd.DataFrame(np.c_[boston['LSTAT'], boston['RM']], columns = ['LSTAT', 'RM'])
Y = boston['MEDV']


# In[45]:


# Spliting the data into training and testing sets


# In[46]:


from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2, random_state=5)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)


# In[55]:


# Training and testing the model

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)


# In[56]:


# Model evaluation


# In[59]:


# model evaluation for training set
y_train_predict = lin_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))
r2 = r2_score(Y_train, y_train_predict)

print("The model performance for training set")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")


# In[60]:


# model evaluation for testing set
y_test_predict = lin_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))
r2 = r2_score(Y_test, y_test_predict)

print("The model performance for testing set")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))


# In[ ]:




